[1/10] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D C:\ESP32\Ejemplos\UART_NMEA0183\nmea0183_parser\build\bootloader\esp-idf\esptool_py && C:\ESP32\Espressif\python_env\idf5.1_py3.11_env\Scripts\python.exe C:/ESP32/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 C:/ESP32/Ejemplos/UART_NMEA0183/nmea0183_parser/build/bootloader/bootloader.bin"
Bootloader binary size 0x6810 bytes. 0x7f0 bytes (7%) free.
[2/8] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/nmea_parser_example_main.c.obj
[3/8] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/nmea_parser.c.obj
[4/8] Linking C static library esp-idf\main\libmain.a
[5/8] Generating ld/sections.ld
[6/8] Linking CXX executable nmea_parser.elf
[7/8] Generating binary image from built executable
esptool.py v4.7.dev2
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated C:/ESP32/Ejemplos/UART_NMEA0183/nmea0183_parser/build/nmea_parser.bin
[8/8] cmd.exe /C "cd /D C:\ESP32\Ejemplos\UART_NMEA0183\nmea0183_parser\build\esp-idf\esptool_py && C:\ESP32\Espressif\python_env\idf5.1_py3.11_env\Scripts\python.exe C:/ESP32/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app C:/ESP32/Ejemplos/UART_NMEA0183/nmea0183_parser/build/partition_table/partition-table.bin C:/ESP32/Ejemplos/UART_NMEA0183/nmea0183_parser/build/nmea_parser.bin"
nmea_parser.bin binary size 0x38710 bytes. Smallest app partition is 0x100000 bytes. 0xc78f0 bytes (78%) free.
