[1/10] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D C:\ESP32\Ejemplos\UART_NMEA0183\nmea0183_parser\build\bootloader\esp-idf\esptool_py && C:\ESP32\Espressif\python_env\idf5.1_py3.11_env\Scripts\python.exe C:/ESP32/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 C:/ESP32/Ejemplos/UART_NMEA0183/nmea0183_parser/build/bootloader/bootloader.bin"
Bootloader binary size 0x6810 bytes. 0x7f0 bytes (7%) free.
[2/8] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/nmea_parser_example_main.c.obj
[3/8] Linking C static library esp-idf\main\libmain.a
[4/8] Generating ld/sections.ld
[5/8] Linking CXX executable nmea_parser.elf
[6/8] Generating binary image from built executable
esptool.py v4.7.dev2
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated C:/ESP32/Ejemplos/UART_NMEA0183/nmea0183_parser/build/nmea_parser.bin
[7/8] cmd.exe /C "cd /D C:\ESP32\Ejemplos\UART_NMEA0183\nmea0183_parser\build\esp-idf\esptool_py && C:\ESP32\Espressif\python_env\idf5.1_py3.11_env\Scripts\python.exe C:/ESP32/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app C:/ESP32/Ejemplos/UART_NMEA0183/nmea0183_parser/build/partition_table/partition-table.bin C:/ESP32/Ejemplos/UART_NMEA0183/nmea0183_parser/build/nmea_parser.bin"
nmea_parser.bin binary size 0x387f0 bytes. Smallest app partition is 0x100000 bytes. 0xc7810 bytes (78%) free.
[7/8] cmd.exe /C "cd /D C:\ESP32\esp-idf\components\esptool_py && C:\ESP32\Espressif\tools\cmake\3.24.0\bin\cmake.exe -D IDF_PATH=C:/ESP32/esp-idf -D SERIAL_TOOL=C:/ESP32/Espressif/python_env/idf5.1_py3.11_env/Scripts/python.exe;;C:/ESP32/esp-idf/components/esptool_py/esptool/esptool.py;--chip;esp32 -D SERIAL_TOOL_ARGS=--before=default_reset;--after=hard_reset;write_flash;@flash_args -D WORKING_DIRECTORY=C:/ESP32/Ejemplos/UART_NMEA0183/nmea0183_parser/build -P C:/ESP32/esp-idf/components/esptool_py/run_serial_tool.cmake"
esptool.py --chip esp32 -p COM5 -b 460800 --before=default_reset --after=hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size 2MB 0x1000 bootloader/bootloader.bin 0x10000 nmea_parser.bin 0x8000 partition_table/partition-table.bin
esptool.py v4.7.dev2
Serial port COM5
Connecting....
Chip is ESP32-D0WDQ6 (revision v1.0)
Features: WiFi, BT, Dual Core, 240MHz, VRef calibration in efuse, Coding Scheme None
Crystal is 40MHz
MAC: c8:f0:9e:a6:a2:10
Uploading stub...
Running stub...
Stub running...
Changing baud rate to 460800
Changed.
Configuring flash size...
Flash will be erased from 0x00001000 to 0x00007fff...
Flash will be erased from 0x00010000 to 0x00048fff...
Flash will be erased from 0x00008000 to 0x00008fff...
Compressed 26640 bytes to 16685...
Writing at 0x00001000... (50 %)
Writing at 0x0000768f... (100 %)
Wrote 26640 bytes (16685 compressed) at 0x00001000 in 0.8 seconds (effective 274.4 kbit/s)...
Hash of data verified.
Compressed 231408 bytes to 130198...
Writing at 0x00010000... (12 %)
Writing at 0x0001c89d... (25 %)
Writing at 0x00023ba9... (37 %)
Writing at 0x0002998d... (50 %)
Writing at 0x0002f017... (62 %)
Writing at 0x00035582... (75 %)
Writing at 0x0003d13d... (87 %)
Writing at 0x00042c2e... (100 %)
Wrote 231408 bytes (130198 compressed) at 0x00010000 in 3.2 seconds (effective 577.3 kbit/s)...
Hash of data verified.
Compressed 3072 bytes to 103...
Writing at 0x00008000... (100 %)
Wrote 3072 bytes (103 compressed) at 0x00008000 in 0.1 seconds (effective 396.4 kbit/s)...
Hash of data verified.

Leaving...
Hard resetting via RTS pin...
